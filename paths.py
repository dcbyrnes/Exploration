class Graph:

	def __init__(self, storage, goal):
		self.storage = storage
		self.goal = goal

	def shortest_path(self, start):
		queue =  [(start, [start])]
		if start == self.goal:
			return 0
		while queue:
			(vertex, path) = queue.pop(0)
			for next in self.storage[vertex] - set(path):
				if next == self.goal:
					return len(path)
				else:
					queue.append((next, path + [next]))

graph = {
	(0, 0): set([(0, 1), (1, 0)]),
	(0, 1): set([(0, 2), (1, 1), (0, 0)]),
	(0, 2): set([(0, 3), (1, 2), (0, 1)]),
	(0, 3): set([(0, 4), (0, 2)]),
	(0, 4): set([(0, 5), (0, 3)]),
	(0, 5): set([(0, 6), (0, 4)]),
	(0, 6): set([(0, 7), (1, 6), (0, 5)]),
	(0, 7): set([(0, 8), (1, 7), (0, 6)]),
	(0, 8): set([(6, 1), (1, 8), (0, 7)]), #portal
	(0, 9): set([(1, 9), (0, 8)]),
	(1, 0): set([(0, 0), (2, 0)]),
	(1, 1): set([(0, 1), (2, 1)]),
	(1, 2): set([(0, 2), (1, 3)]),
	(1, 3): set([(2, 3), (1, 2)]),
	(1, 4): set([(1, 5), (2, 4)]),
	(1, 5): set([(1, 6), (2, 5), (1, 4)]),
	(1, 6): set([(0, 6), (1, 5)]),
	(1, 7): set([(0, 7), (1, 8), (2, 7)]),
	(1, 8): set([(0, 8), (1, 9), (1, 7)]),
	(1, 9): set([(6, 1), (2, 9), (1, 8)]), #portal
	(2, 0): set([(1, 0), (2, 1)]),
	(2, 1): set([(1, 1), (2, 2), (3, 1), (2, 0)]),
	(2, 2): set([(3, 2), (2, 1)]),
	(2, 3): set([(1, 3), (3, 3)]),
	(2, 4): set([(1, 4),(3, 4)]),
	(2, 5): set([(1, 5), (2, 6), (4, 3)]), #portal
	(2, 6): set([(2, 7), (3, 6), (2, 5)]),
	(2, 7): set([(1, 7), (2, 8), (2, 6)]),
	(2, 8): set([(2, 9), (3, 8), (2, 7)]),
	(2, 9): set([(1, 9), (3, 9), (2, 8)]),
	(3, 0): set([(3, 1), (4, 0)]),
	(3, 1): set([(2, 1), (4, 1), (3, 0)]),
	(3, 2): set([(2, 2), (4, 2)]),
	(3, 3): set([(2, 3), (3, 4)]),
	(3, 4): set([(2, 4), (4, 4), (3, 3)]),
	(3, 5): set([(2, 5), (3, 6), (4, 5)]),
	(3, 6): set([(2, 6), (3, 7), (4, 3)]), #portal
	(3, 7): set([(4, 7), (3, 6)]),
	(3, 8): set([(2, 8), (6, 3)]), # portal
	(3, 9): set([(2, 9)]),
	(4, 0): set([(3, 0), (4, 1), (5, 0)]),
	(4, 1): set([(3, 1), (4, 2), (4, 0)]),
	(4, 2): set([(3, 2), (5, 2), (4, 1)]),
	(4, 3): set([(4, 4), (5, 3)]),
	(4, 4): set([(3, 4), (5, 4), (3, 5)]), #portal
	(4, 5): set([(4, 3), (4, 6), (5, 5)]), #portal
	(4, 6): set([(5, 6), (4, 5)]),
	(4, 7): set([(3, 7)]),
	(4, 8): set([(3, 8), (4, 9)]),
	(4, 9): set([(5, 9), (4, 8)]),
	(5, 0): set([(4, 0),  (6, 0)]),
	(5, 1): set([(5, 2), (0, 9)]), #portal
	(5, 2): set([(4, 2), (5, 1)]),
	(5, 3): set([(3, 5),  (4, 7)]), #portal
	(5, 4): set([(4, 4), (5, 5), (6, 4)]),
	(5, 5): set([(4, 5), (5, 4)]),
	(5, 6): set([(4, 6), (5, 7)]),
	(5, 7): set([(5, 8), (6, 7), (5, 6)]),
	(5, 8): set([(5, 9), (5, 7)]),
	(5, 9): set([(4, 9), (6, 9), (5, 8)]),
	(6, 0): set([(5, 0), (7, 0)]),
	(6, 1): set([(5, 1), (7, 1)]),
	(6, 2): set([(4, 8), (7, 2)]), # portal
	(6, 3): set([(5, 3), (6, 2)]),
	(6, 4): set([(5, 4)]),
	(6, 5): set([(6, 6), (7, 5)]),
	(6, 6): set([(6, 7), (7, 6), (6, 5)]),
	(6, 7): set([(5, 7), (6, 8), (7, 7), (6, 6)]),
	(6, 8): set([(6, 9), (7, 8), (6, 7)]),
	(6, 9): set([(5, 9), (7, 9), (6, 8)]),
	(7, 0): set([(6, 0),(8, 0)]),
	(7, 1): set([(0, 9), (8, 1)]),
	(7, 2): set([(6, 2), (8, 2)]),
	(7, 3): set([(7, 4), (8, 3)]),
	(7, 4): set([(8, 4), (7, 3)]),
	(7, 5): set([(6, 5), (7, 6), (8, 5)]),
	(7, 6): set([(6, 6), (7, 7), (8, 6), (7, 5)]),
	(7, 7): set([(6, 7), (7, 6)]),
	(7, 8): set([(6, 8), (7, 9)]),
	(7, 9): set([(6, 9), (8, 9), (7, 8)]),
	(8, 0): set([(7, 0), (9, 0)]),
	(8, 1): set([(7, 1)]),
	(8, 2): set([(7, 2), (8, 3)]),
	(8, 3): set([(7, 3), (8, 2)]),
	(8, 4): set([(7, 4), (9, 4)]),
	(8, 5): set([(7, 5), (8, 6)]),
	(8, 6): set([(7, 6), (8, 7), (8, 5)]),
	(8, 7): set([(8, 8), (9, 7), (8, 6)]),
	(8, 8): set([(8, 9), (9, 8), (8, 7)]),
	(8, 9): set([(7, 9), (9, 9), (8, 8)]),
	(9, 0): set([(8, 0), (9, 1)]),
	(9, 1): set([(9, 2), (9, 0)]),
	(9, 2): set([(9, 3), (9, 1)]),
	(9, 3): set([(9, 4), (9, 2)]),
	(9, 4): set([(8, 4), (9, 5), (9, 3)]),
	(9, 5): set([(9, 6), (9, 4)]),
	(9, 6): set([(9, 7), (9, 5)]),
	(9, 7): set([(8, 7), (9, 8), (9, 6)]),
	(9, 8): set([(8, 8), (9, 7)]),
	(9, 9): set([(8, 9)])
}

import numpy as np

g = Graph(graph, (1,0))
dist = np.zeros((10, 10))
for i in range(10):
	for j in range(10):
		dist[i,j] = g.shortest_path((i,j))

print(dist)